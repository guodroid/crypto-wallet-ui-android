apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def developerMode(String defaultValue){
    def value = project.getProperties().get("developerMode")
    return value != null ? value : defaultValue
}

android {

    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    defaultConfig {

        applicationId "org.trustnote.superwallet"

        buildConfigField "String", "GitHash", "\"${getGitHash()}\""

        buildConfigField "boolean", "DEVELOPER_MODE", developerMode("true")

        minSdkVersion 21
        targetSdkVersion 26

        // Enable VectorDrawableCompat for API < 21
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    updateVersion()

    kotlinOptions {
        suppressWarnings = true
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            manifestPlaceholders.put("appBuildType", "DEBUG")
        }
        release {
            //applicationIdSuffix '.release'
            manifestPlaceholders.put("appBuildType", "RELEASE")
            versionNameSuffix '-RELEASE'
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "applicationIdSuffix"

    productFlavors {
        mainnet {
            buildConfigField "boolean", "IS_MAINNET", "true"
            //versionNameSuffix '-MAINNET'
            manifestPlaceholders.put("appProductFlavor", "MAINNET")
        }

        devnet {
            //resValue "string", "app_name", "TestNet"
            manifestPlaceholders.put("appProductFlavor", "TESTNET")
            applicationIdSuffix ".dev"
            versionNameSuffix '-DEVNET'
            buildConfigField "boolean", "IS_MAINNET", "false"
        }
    }


    dataBinding {
        enabled = true
    }

    sourceSets {
        // AesCbc source set is Kotlin!
        main.java.srcDirs += 'src/main/kotlin'

        // Unit tests live in src/unitTest.
        test.java.srcDir 'src/unitTests/kotlin'

        // Integration tests live in src/integrationTest.
        test.java.srcDir 'src/integrationTests/kotlin'

        // Unit tests for debug build type specific code live in src/debugUnitTest.
        testDebug.java.srcDir 'src/debugUnitTests/kotlin'

        // Unit tests for release build type specific code live in src/releaseUnitTest.
        testRelease.java.srcDir 'src/releaseUnitTests/kotlin'

        // Functional tests live in src/functionalTests.
        androidTest.java.srcDir 'src/androidTests/kotlin'
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false // Fail early.
        disable 'ValidFragment'
        lintConfig file("lint.xml")
    }

    // Show all test output in the command line!
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// Use for legacy kapt implementation
// Required for annotation processing plugins like Dagger
// kapt {
//    generateStubs = true
//}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // Google Support Libraries
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:support-fragment:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.0.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.github.Plastix.RxSchedulerRule:rx2:1.0.2'
    implementation 'com.github.Plastix.RxDelay:rx2:0.5.0'
    // Dagger 2
    kapt 'com.google.dagger:dagger-compiler:2.8'
    implementation 'com.google.dagger:dagger:2.8'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0'
    // Misc
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.timber:timber:4.1.2'
    // Databinding
    kapt "com.android.databinding:compiler:$android_plugin_version"
    implementation 'com.google.code.gson:gson:2.7'
    //Web Socket for HubManager API
    implementation 'org.java-websocket:Java-WebSocket:1.3.8'
    // Android permission Utils.
    implementation 'com.lovedise:permissiongen:0.0.6'
    // IOS like Setting UI
    implementation 'com.thoughtbot:expandablerecyclerview:1.3'
    // IOS style swipeable list item.
    implementation 'com.chauthai.swipereveallayout:swipe-reveal-layout:1.4.1'
    // IOS swipe back
    implementation 'me.yokeyword:swipebackfragment:0.4.0'
    // IOS progress dialog
    implementation 'com.kaopiz:kprogresshud:1.1.0'
    implementation('android.arch.persistence.room:rxjava2:1.0.0') {
        exclude group: 'com.android.support'
    }
    kapt "android.arch.persistence.room:compiler:1.0.0"
    //
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    annotationProcessor "android.arch.persistence.room:rxjava2:1.0.0"
    // Unit Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'android.arch.core:core-testing:1.0.0'
    androidTestImplementation 'com.android.support:support-annotations:26.0.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    implementation project(':shadow')
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// Signing Config code
// From https://gist.github.com/gabrielemariotti/6856974
def signPropFile = new File(buildDir.parentFile.parentFile, 'signing.properties')

Properties props = new Properties()
if (signPropFile.canRead()) {
    props.load(new FileInputStream(signPropFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}


def publish = project.tasks.create("publishAll")
def nowTimeAsString = getNowAsString()
def myFileServerPath = new File(buildDir.parentFile.parentFile, "myfileserver")
def versionPath = new File(myFileServerPath, android.defaultConfig.versionName)
def targetPath = new File(versionPath, nowTimeAsString)

android.applicationVariants.all { variant ->
    def task = project.tasks.create("publish${variant.name}Apk", Copy)
    task.from(variant.outputs[0].outputFile)
    task.into(targetPath)

    task.dependsOn variant.assemble
    publish.dependsOn task
    publish << {
        println "copy apk to myfileserver"
    }
}

task syncFileServer(type: Exec) {
    workingDir '../'
    commandLine "./sync_fileserver"
}
publish.dependsOn syncFileServer

def readVersionName() {
    return android.defaultConfig.versionName
}

def getNowAsString() {
    Date date = new Date()
    return date.format("yyyy_MM_dd_HH_mm")
}


def updateVersion() {

    def versionPropsFile = new File(rootDir, 'version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        //
        // versionCode
        //
        def versionCodeNo = versionProps['VERSION_CODE'].toInteger()
        versionProps['VERSION_CODE'] = versionCodeNo.toString()

        //
        // versionName
        //
        def versionNameMajor = versionProps['VERSION_NAME_MAJOR'].toInteger()
        versionProps['VERSION_NAME_MAJOR'] = versionNameMajor.toString()

        def versionNameMinor = versionProps['VERSION_NAME_MINOR'].toInteger()
        versionProps['VERSION_NAME_MINOR'] = versionNameMinor.toString()

        def versionNamePatch = versionProps['VERSION_NAME_PATCH'].toInteger()
        versionProps['VERSION_NAME_PATCH'] = versionNamePatch.toString()

        def versionNameBuild = versionProps['VERSION_NAME_BUILD'].toInteger()
        versionProps['VERSION_NAME_BUILD'] = versionNameBuild.toString()

        //versionProps.store(versionPropsFile.newWriter(), null)

        android.defaultConfig {
            versionCode versionCodeNo
            versionName versionNameMajor + "." + versionNameMinor + "." + versionNamePatch + "." + versionNameBuild
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

task gitPull(type: Exec) {
    description 'Pulls git.'
    commandLine "git", "pull", "origin", "master:master"
    println "Git pull latest code in master branch"
}


//preBuild.dependsOn gitPull

build.finalizedBy publishAll
